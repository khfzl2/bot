import discord
from discord.ext import commands
import requests
import io
import asyncio
from urllib.parse import quote
import logging
from PIL import Image
import numpy as np
from ..utils import create_embed, create_error_embed, create_success_embed

logger = logging.getLogger(__name__)

class ImageCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command(name="image", aliases=["img", "generate"])
    async def generate_image(self, ctx, *, prompt: str):
        """Generate an AI image from a text prompt using Pollinations AI"""
        if not prompt:
            await ctx.send(embed=create_error_embed("Missing Prompt", "Please provide a text prompt for image generation."))
            return

        # Send initial message
        status_msg = await ctx.send(embed=create_embed("üñåÔ∏è Generating Image", f"Creating image for: `{prompt}`..."))

        try:
            # Generate image using Pollinations AI
            image_bytes = await self._generate_image_with_pollinations(prompt)
            
            if image_bytes:
                # Check if image is completely black (NSFW filter detection)
                is_black = self._is_image_black(image_bytes)
                
                if is_black:
                    # Send NSFW warning instead of the black image
                    embed = create_error_embed(
                        "üö´ Content Filtered",
                        f"**Prompt:** {prompt}\n\n"
                        "Images that are fully black usually means they are NSFW. "
                        "Do not try to generate NSFW pics again.\n\n"
                        "Please try a different, appropriate prompt."
                    )
                    embed.set_footer(text="Content filtered by Pollinations AI")
                    await status_msg.delete()
                    await ctx.send(embed=embed)
                else:
                    # Create a Discord file from the image bytes
                    file = discord.File(io.BytesIO(image_bytes), filename="generated_image.png")
                    
                    # Create success embed
                    embed = create_success_embed(
                        "‚úÖ Image Generated",
                        f"**Prompt:** {prompt}"
                    )
                    embed.set_footer(text=f"Generated by {ctx.author.display_name} ‚Ä¢ Powered by Pollinations AI")
                    
                    await status_msg.delete()
                    await ctx.send(embed=embed, file=file)
            else:
                await status_msg.edit(embed=create_error_embed(
                    "Generation Failed",
                    "Image generation failed. The model might be loading (wait a few minutes) or try a different prompt."
                ))
        except Exception as e:
            logger.error(f"Image generation error: {e}")
            await status_msg.edit(embed=create_error_embed(
                "Error",
                f"An error occurred during image generation: {str(e)}"
            ))



    async def _generate_image_with_pollinations(self, prompt):
        """Generate image using Pollinations AI's free API"""
        try:
            # Pollinations AI provides free image generation without API keys
            base_url = "https://image.pollinations.ai/prompt/"
            # URL encode the prompt and add some basic parameters
            encoded_prompt = quote(prompt)
            full_url = f"{base_url}{encoded_prompt}?width=1024&height=1024&model=flux&nologo=true"
            
            logger.info(f"Requesting image from: {full_url}")
            
            # Make the request in a thread to avoid blocking
            def make_request():
                return requests.get(full_url, timeout=60)
            
            loop = asyncio.get_event_loop()
            response = await loop.run_in_executor(None, make_request)
            
            logger.info(f"Pollinations API Response Status: {response.status_code}")
            
            if response.status_code == 200:
                content_type = response.headers.get('content-type', '')
                logger.info(f"Content type: {content_type}")
                if 'image' in content_type:
                    return response.content
                else:
                    logger.warning(f"Unexpected content type: {content_type}")
                    return None
            else:
                logger.error(f"API Error: {response.status_code}")
                return None
        except Exception as e:
            logger.error(f"Exception in Pollinations API call: {e}")
            return None

    @commands.command(name="imagestatus")
    async def image_status(self, ctx):
        """Check image generation service status"""
        embed = create_embed(
            "üñåÔ∏è Image Generation Status",
            "**Service:** Pollinations AI (Free)\n"
            "**Status:** ‚úÖ Online\n"
            "**Model:** Flux\n"
            "**Resolution:** 1024x1024\n\n"
            "**Usage:**\n"
            "`k!image <prompt>` - Generate image with text prompt\n"
            "`k!img <prompt>` - Short alias for image generation\n"
            "`k!generate <prompt>` - Alternative generation command"
        )
        embed.add_field(
            name="Tips",
            value="‚Ä¢ Be descriptive with your prompts\n‚Ä¢ Include style keywords (e.g., 'digital art', 'photorealistic')\n‚Ä¢ Specify colors, mood, and composition",
            inline=False
        )
        embed.set_footer(text="No API key required ‚Ä¢ Free service")
        await ctx.send(embed=embed)

    def _is_image_black(self, image_bytes):
        """Check if an image is completely or mostly black (NSFW filter detection)"""
        try:
            # Open image from bytes
            image = Image.open(io.BytesIO(image_bytes))
            
            # Convert to RGB if not already
            if image.mode != 'RGB':
                image = image.convert('RGB')
            
            # Convert to numpy array
            img_array = np.array(image)
            
            # Calculate the average brightness of the image
            # Each pixel has RGB values from 0-255, so max possible is 255
            avg_brightness = np.mean(img_array)
            
            # If average brightness is very low (close to 0), it's likely a black image
            # Using threshold of 15 to account for slight variations
            is_black = avg_brightness < 15
            
            logger.info(f"Image brightness analysis: avg={avg_brightness:.2f}, is_black={is_black}")
            return is_black
            
        except Exception as e:
            logger.error(f"Error analyzing image blackness: {e}")
            # If we can't analyze, assume it's not black to avoid false positives
            return False

async def setup(bot):
    await bot.add_cog(ImageCog(bot))