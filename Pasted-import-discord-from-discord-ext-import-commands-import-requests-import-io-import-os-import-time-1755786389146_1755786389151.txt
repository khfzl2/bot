import discord
from discord.ext import commands
import requests
import io
import os
import time
from urllib.parse import quote

# Discord setup
intents = discord.Intents.default()
# Note: message_content intent not needed for slash commands
bot = commands.Bot(command_prefix="!", intents=intents)

@bot.event
async def on_ready():
    print(f"Logged in as {bot.user}")
    try:
        synced = await bot.tree.sync()
        print(f"Synced {len(synced)} command(s)")
    except Exception as e:
        print(f"Failed to sync commands: {e}")

def generate_image_with_pollinations(prompt):
    """Generate image using Pollinations AI's free API"""
    try:
        # Pollinations AI provides free image generation without API keys
        base_url = "https://image.pollinations.ai/prompt/"
        # URL encode the prompt and add some basic parameters
        encoded_prompt = quote(prompt)
        full_url = f"{base_url}{encoded_prompt}?width=1024&height=1024&model=flux&nologo=true"
        
        print(f"Requesting image from: {full_url}")
        
        response = requests.get(full_url, timeout=60)
        print(f"Pollinations API Response Status: {response.status_code}")
        
        if response.status_code == 200:
            content_type = response.headers.get('content-type', '')
            print(f"Content type: {content_type}")
            if 'image' in content_type:
                return response.content
            else:
                print(f"Unexpected content type: {content_type}")
                return None
        else:
            print(f"API Error: {response.status_code}")
            return None
    except Exception as e:
        print(f"Exception in Pollinations API call: {e}")
        return None

@bot.tree.command(name="image", description="Generate an AI image from a text prompt")
async def image(interaction: discord.Interaction, prompt: str):
    # Defer the response immediately to prevent timeout
    await interaction.response.defer()
    
    try:
        # Send an initial message
        await interaction.followup.send(f"üñåÔ∏è Generating image for: `{prompt}`...")
        
        # Use Pollinations AI's free image generation
        image_bytes = generate_image_with_pollinations(prompt)
        
        if image_bytes:
            # Create a Discord file from the image bytes
            file = discord.File(io.BytesIO(image_bytes), filename="generated_image.png")
            await interaction.followup.send(file=file)
        else:
            await interaction.followup.send("‚ùå Image generation failed. The model might be loading (wait a few minutes) or try a different prompt.")
    except Exception as e:
        await interaction.followup.send(f"‚ùå Error: {str(e)}")

# Get the Discord bot token
discord_token = os.getenv("DISCORD_BOT_TOKEN")
if not discord_token:
    print("‚ùå DISCORD_BOT_TOKEN not found in environment variables")
    exit(1)

# Note: Using Hugging Face's free inference API - no API key required

print("ü§ñ Starting Discord bot...")
# Add a small delay to avoid rate limiting
time.sleep(2)
try:
    bot.run(discord_token)
except discord.errors.HTTPException as e:
    if "429" in str(e):
        print("‚ö†Ô∏è  Rate limited by Discord. Please wait a few minutes before restarting.")
        print("This happens when the bot connects too frequently.")
        exit(1)
    else:
        raise e
