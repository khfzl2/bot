import discord
from discord.ext import commands
from discord import app_commands
import logging
import asyncio
from ..utils import create_embed, create_error_embed, create_success_embed, has_permissions

logger = logging.getLogger(__name__)

class TemplateCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command(name="template")
    @has_permissions(administrator=false , manage_channels=true)
    async def create_template(self, ctx, *, description: str = None):
        """Create a server template with categories, channels, and roles"""
        await self._create_template_logic(ctx, description)



    @commands.command(name="roles", aliases=["roleinfo", "role-info"])
    async def describe_roles(self, ctx, role_name: str = None):
        """Describe server roles and their permissions"""
        await self._describe_roles_logic(ctx, role_name)



    async def _describe_roles_logic(self, ctx, role_name: str = None):
        """Logic for describing roles and their permissions"""
        
        # Role descriptions and their purposes
        role_descriptions = {
            "Owner": {
                "description": "The highest authority in the server with complete control over all aspects.",
                "purpose": "Server ownership, final decision making, and complete administrative control",
                "permissions": "All permissions including server deletion and ownership transfer",
                "color": discord.Color.from_rgb(255, 0, 0),
                "icon": "üëë"
            },
            "Co-Owner": {
                "description": "Second-in-command with nearly all administrative powers, trusted with server management.",
                "purpose": "Assist the owner in server management and handle major administrative tasks",
                "permissions": "All permissions except server deletion and ownership transfer",
                "color": discord.Color.from_rgb(255, 128, 0),
                "icon": "üíé"
            },
            "Manager": {
                "description": "Senior staff member responsible for overseeing operations and managing other staff.",
                "purpose": "Oversee daily operations, manage staff, and implement server policies",
                "permissions": "Full administrative permissions including role management and server settings",
                "color": discord.Color.from_rgb(255, 255, 0),
                "icon": "‚≠ê"
            },
            "BOTS": {
                "description": "Automated systems that help manage and moderate the server.",
                "purpose": "Provide automated moderation, utilities, and enhanced server functionality",
                "permissions": "Full permissions to perform automated tasks and server management",
                "color": discord.Color.from_rgb(128, 128, 128),
                "icon": "ü§ñ"
            },
            "Administrator": {
                "description": "High-level staff with broad administrative powers for server management.",
                "purpose": "Handle complex administrative tasks, manage channels, and assist with server development",
                "permissions": "Full administrative permissions including channel/role management",
                "color": discord.Color.from_rgb(255, 0, 255),
                "icon": "üõ°Ô∏è"
            },
            "Moderator": {
                "description": "Frontline staff responsible for maintaining order and enforcing server rules.",
                "purpose": "Monitor chat, enforce rules, handle reports, and moderate user behavior",
                "permissions": "Moderation permissions: kick, ban, mute, manage messages, timeout members",
                "color": discord.Color.from_rgb(0, 255, 0),
                "icon": "üî®"
            },
            "Member": {
                "description": "Standard server member with basic participation privileges.",
                "purpose": "Participate in server activities, chat, and use voice channels",
                "permissions": "Basic permissions: send messages, connect to voice, use emojis",
                "color": discord.Color.from_rgb(0, 191, 255),
                "icon": "üë§"
            }
        }

        if role_name:
            # Show specific role information
            role_name = role_name.title()
            if role_name in role_descriptions:
                role_info = role_descriptions[role_name]
                embed = discord.Embed(
                    title=f"{role_info['icon']} {role_name} Role Information",
                    description=role_info['description'],
                    color=role_info['color']
                )
                embed.add_field(
                    name="üìã Purpose",
                    value=role_info['purpose'],
                    inline=False
                )
                embed.add_field(
                    name="üîê Permissions",
                    value=role_info['permissions'],
                    inline=False
                )
                
                # Check if role exists in server
                server_role = discord.utils.get(ctx.guild.roles, name=role_name)
                if server_role:
                    embed.add_field(
                        name="üìä Server Info",
                        value=f"**Members:** {len(server_role.members)}\n**Position:** {server_role.position}\n**Mentionable:** {'Yes' if server_role.mentionable else 'No'}",
                        inline=True
                    )
                else:
                    embed.add_field(
                        name="‚ùå Server Status",
                        value="This role doesn't exist in this server yet",
                        inline=True
                    )
                
                embed.set_footer(text=f"Requested by {ctx.author.display_name}")
                await ctx.send(embed=embed)
            else:
                await ctx.send(embed=create_error_embed("Role Not Found", f"No information available for role '{role_name}'. Available roles: {', '.join(role_descriptions.keys())}"))
        else:
            # Show all roles overview
            embed = discord.Embed(
                title="üèõÔ∏è Server Role Hierarchy & Descriptions",
                description="Complete guide to server roles, their purposes, and permissions",
                color=discord.Color.blue()
            )
            
            # Add role hierarchy
            hierarchy_text = ""
            for role_name, info in role_descriptions.items():
                if role_name == "BOTS":
                    continue  # Skip bots in hierarchy display
                server_role = discord.utils.get(ctx.guild.roles, name=role_name)
                member_count = len(server_role.members) if server_role else 0
                hierarchy_text += f"{info['icon']} **{role_name}** - {member_count} members\n{info['description']}\n\n"
            
            embed.add_field(
                name="üìä Role Hierarchy (Highest to Lowest)",
                value=hierarchy_text,
                inline=False
            )
            
            # Permission categories explanation
            permission_info = """
**üî¥ Owner/Co-Owner:** Complete server control
**üü° Manager/Admin:** Full administrative powers
**üü¢ Moderator:** Moderation and rule enforcement
**üîµ Member:** Basic participation rights
**‚ö™ Bots:** Automated server management
            """
            
            embed.add_field(
                name="üîê Permission Categories",
                value=permission_info,
                inline=False
            )
            
            embed.add_field(
                name="üí° Usage",
                value="Use `k!roles <role_name>` for detailed information about a specific role",
                inline=False
            )
            
            embed.set_footer(text=f"Requested by {ctx.author.display_name}")
            await ctx.send(embed=embed)

    async def _create_template_logic(self, ctx, description: str = None):
        # Check bot permissions
        required_permissions = [
            'manage_channels', 'manage_roles', 'administrator'
        ]

        missing_permissions = []
        for perm in required_permissions:
            if not getattr(ctx.guild.me.guild_permissions, perm, False):
                missing_permissions.append(perm.replace('_', ' ').title())

        if missing_permissions:
            error_msg = f"Sorry but my permission is not able to make the categorys, text channels, etc.\n\nMissing permissions: {', '.join(missing_permissions)}"
            await ctx.send(embed=create_error_embed("Insufficient Permissions", error_msg))
            return

        # Send initial message
        status_msg = await ctx.send(embed=create_embed("üèóÔ∏è Template Creation", "Creating Categorys..."))

        try:
            # Create roles with appropriate permissions and colors
            roles_data = [
                ("Owner", discord.Permissions.all(), discord.Color.from_rgb(255, 0, 0)),  # Red
                ("Co-Owner", discord.Permissions.all(), discord.Color.from_rgb(255, 128, 0)),  # Orange
                ("Manager", discord.Permissions.all(), discord.Color.from_rgb(255, 255, 0)),  # Yellow
                ("BOTS", discord.Permissions.all(), discord.Color.from_rgb(128, 128, 128)),  # Gray
                ("Administrator", discord.Permissions.all(), discord.Color.from_rgb(255, 0, 255)),  # Magenta
                ("Moderator", discord.Permissions(
                    kick_members=True,
                    ban_members=True,
                    manage_messages=True,
                    mute_members=True,
                    deafen_members=True,
                    move_members=True,
                    manage_nicknames=True,
                    view_audit_log=True,
                    moderate_members=True
                ), discord.Color.from_rgb(0, 255, 0)),  # Green
                ("Member", discord.Permissions(
                    send_messages=True,
                    read_messages=True,
                    connect=True,
                    speak=True,
                    use_voice_activation=True
                ), discord.Color.from_rgb(0, 191, 255)),  # Blue
                ("@everyone", discord.Permissions.none(), discord.Color.default())
            ]

            # Update status to creating roles
            await status_msg.edit(embed=create_embed("üèóÔ∏è Template Creation", "Creating roles..."))

            created_roles = {}
            for role_name, permissions, color in roles_data:
                if role_name == "@everyone":
                    # Update @everyone role
                    await ctx.guild.default_role.edit(permissions=permissions)
                    created_roles["@everyone"] = ctx.guild.default_role
                else:
                    # Check if role already exists
                    existing_role = discord.utils.get(ctx.guild.roles, name=role_name)
                    if existing_role:
                        # Update existing role
                        await existing_role.edit(permissions=permissions, color=color)
                        created_roles[role_name] = existing_role
                    else:
                        # Create new role
                        role = await ctx.guild.create_role(
                            name=role_name,
                            permissions=permissions,
                            color=color,
                            reason=f"Template setup by {ctx.author}"
                        )
                        created_roles[role_name] = role
                        await asyncio.sleep(0.5)  # Rate limit protection

            # Create categories and channels
            await status_msg.edit(embed=create_embed("üèóÔ∏è Template Creation", "Creating Text Channels..."))

            # Get template structure based on description
            template_structure = self._get_template_structure(description)

            # Default template structure if no custom one
            if not template_structure:
                template_structure = [
                {
                    "category": "‚ÄºÔ∏èInformation",
                    "channels": [
                        ("üìú", "rules", "text"),
                        ("üì¢", "announcements", "text"),
                        ("üìù", "beside-notes", "text"),
                        ("üí±", "change-logs", "text"),
                        ("üñ•Ô∏è", "staff-applications", "text")
                    ]
                },
                { 
                    "category": "üëã General",
                    "channels": [
                        ("üó®Ô∏è", "general", "text"),
                        ("üòÇ", "memes", "text"),
                        ("üëã", "introductions", "text"),
                        ("üéä", "birthdays", "text"),
                        ("üíª", "self-promotion", "text"),
                        ("üê∂", "pet-reveals", "text"),
                        ("üôé", "face-reveals", "text")
                    ]
                },
                {
                    "category": "‚ûïExtra",
                    "channels": [
                        ("üî¢", "counting", "text"),
                        ("üòà", "spam", "text"),
                        ("üéüÔ∏è", "tickets", "text"),
                        ("üò≠", "mental-health-zone", "text"),
                        ("üó£Ô∏è", "voice-reveal", "text")
                    ]
                },
                {
                    "category": "üîàVoice Chat",
                    "channels": [
                        ("üîä", "voice-chat-1", "voice"),
                        ("üîä", "voice-chat-2", "voice"),
                        ("üéÆ", "gaming", "voice"),
                        ("üé≠", "theatre", "voice"),
                        ("üîä", "staff-voice-chat", "voice")
                    ]
                },
                {
                    "category": "üíº Staff Only",
                    "channels": [
                        ("üì¢", "staff-announcements", "text"),
                        ("üíº", "all-staff-chat", "text"),
                        ("üíº", "moderator-chat", "text"),
                        ("üíº", "administrator-chat", "text"),
                        ("üíº", "manager-plus-chat", "text"),
                        ("üëÄ", "staff-logs", "text")
                    ]
                }
            ]

            # Create categories and channels
            for category_data in template_structure:
                category_name = category_data["category"]

                # Check if category already exists
                existing_category = discord.utils.get(ctx.guild.categories, name=category_name)
                if existing_category:
                    category = existing_category
                else:
                    # Set up permissions for categories
                    overwrites = {
                        ctx.guild.default_role: discord.PermissionOverwrite(read_messages=True)
                    }

                    # Staff only category permissions
                    if "Staff Only" in category_name:
                        overwrites[ctx.guild.default_role] = discord.PermissionOverwrite(read_messages=False)
                        for role_name in ["Owner", "Co-Owner", "Manager", "BOTS", "Administrator", "Moderator"]:
                            if role_name in created_roles:
                                overwrites[created_roles[role_name]] = discord.PermissionOverwrite(read_messages=True)

                    category = await ctx.guild.create_category(
                        name=category_name,
                        overwrites=overwrites
                    )
                    await asyncio.sleep(0.5)

                # Create channels in category
                for emoji, channel_name, channel_type in category_data["channels"]:
                    full_channel_name = f"{emoji}{channel_name}"

                    # Check if channel already exists
                    existing_channel = discord.utils.get(category.channels, name=full_channel_name)
                    if existing_channel:
                        continue

                    # Set up channel permissions
                    overwrites = category.overwrites.copy()

                    # Special permissions for staff channels
                    if "Staff Only" in category_name:
                        if "moderator-chat" in channel_name:
                            # Only moderator+ can access
                            for role_name in ["Moderator", "Administrator", "Manager", "BOTS", "Co-Owner", "Owner"]:
                                if role_name in created_roles:
                                    overwrites[created_roles[role_name]] = discord.PermissionOverwrite(read_messages=True)
                        elif "administrator-chat" in channel_name:
                            # Only admin+ can access
                            for role_name in ["Administrator", "Manager", "BOTS", "Co-Owner", "Owner"]:
                                if role_name in created_roles:
                                    overwrites[created_roles[role_name]] = discord.PermissionOverwrite(read_messages=True)
                        elif "manager-plus-chat" in channel_name:
                            # Only manager+ can access
                            for role_name in ["Manager", "BOTS", "Co-Owner", "Owner"]:
                                if role_name in created_roles:
                                    overwrites[created_roles[role_name]] = discord.PermissionOverwrite(read_messages=True)

                    if channel_type == "text":
                        await ctx.guild.create_text_channel(
                            name=full_channel_name,
                            category=category,
                            overwrites=overwrites
                        )
                    elif channel_type == "voice":
                        await ctx.guild.create_voice_channel(
                            name=full_channel_name,
                            category=category,
                            overwrites=overwrites
                        )

                    await asyncio.sleep(0.5)  # Rate limit protection

            # Final completion message with role information
            completion_embed = create_success_embed("‚úÖ Template Creation", "Completed!")
            completion_embed.add_field(
                name="üìã What was created:",
                value="‚Ä¢ Server categories and channels\n‚Ä¢ Role hierarchy with permissions\n‚Ä¢ Staff-only areas with proper access control",
                inline=False
            )
            completion_embed.add_field(
                name="üí° Next Steps:",
                value="Use `k!roles` to learn about each role's purpose and permissions",
                inline=False
            )
            await status_msg.edit(embed=completion_embed)

        except discord.Forbidden:
            await status_msg.edit(embed=create_error_embed("Error", "Sorry but my permission is not able to make the categorys, text channels, etc."))
        except discord.HTTPException as e:
            await status_msg.edit(embed=create_error_embed("Error", f"An error occurred: {str(e)}"))
        except Exception as e:
            logger.error(f"Unexpected error in template creation: {e}")
            await status_msg.edit(embed=create_error_embed("Error", "An unexpected error occurred during template creation."))

    def _get_template_structure(self, description: str = None):
        """Generate custom template structure based on description"""
        if not description:
            return None
            
        description = description.lower()
        
        # Gaming-focused template
        if "gaming" in description:
            return [
                {
                    "category": "üéÆ Gaming Hub",
                    "channels": [
                        ("üéÆ", "general-gaming", "text"),
                        ("üèÜ", "tournaments", "text"),
                        ("üì∫", "streaming", "text"),
                        ("üéØ", "lfg-looking-for-group", "text"),
                        ("üéÆ", "gaming-voice-1", "voice"),
                        ("üéÆ", "gaming-voice-2", "voice"),
                        ("üèÜ", "tournament-voice", "voice")
                    ]
                },
                {
                    "category": "üïπÔ∏è Game Specific",
                    "channels": [
                        ("üî´", "fps-games", "text"),
                        ("‚öîÔ∏è", "moba-games", "text"),
                        ("üèéÔ∏è", "racing-games", "text"),
                        ("üé≤", "indie-games", "text")
                    ]
                },
                {
                    "category": "üìã Information",
                    "channels": [
                        ("üìú", "rules", "text"),
                        ("üì¢", "announcements", "text"),
                        ("üéä", "events", "text")
                    ]
                }
            ]
        
        # Study/Educational template
        elif "study" in description or "education" in description or "school" in description:
            return [
                {
                    "category": "üìö Study Hub",
                    "channels": [
                        ("üìù", "homework-help", "text"),
                        ("üßÆ", "math-help", "text"),
                        ("üî¨", "science-help", "text"),
                        ("üìñ", "literature-help", "text"),
                        ("üó£Ô∏è", "study-voice", "voice"),
                        ("üìö", "quiet-study", "voice")
                    ]
                },
                {
                    "category": "üë• Social",
                    "channels": [
                        ("üí¨", "general", "text"),
                        ("üòÑ", "memes", "text"),
                        ("‚òï", "break-room", "text")
                    ]
                }
            ]
        
        # Music-focused template
        elif "music" in description or "band" in description:
            return [
                {
                    "category": "üéµ Music Hub",
                    "channels": [
                        ("üé§", "general-music", "text"),
                        ("üéº", "compositions", "text"),
                        ("üìª", "music-sharing", "text"),
                        ("üéß", "listening-party", "voice"),
                        ("üé§", "jam-session", "voice"),
                        ("üéπ", "practice-room-1", "voice"),
                        ("ü•Å", "practice-room-2", "voice")
                    ]
                }
            ]
        
        # Feelings-focused template
        elif "feelings" in description:
            return [
                {
                    "category": "üí≠ Emotional Support",
                    "channels": [
                        ("üòä", "happiness", "text"),
                        ("üò¢", "sadness", "text"),
                        ("üò°", "anger", "text"),
                        ("üò∞", "anxiety", "text"),
                        ("üòç", "love", "text"),
                        ("üòî", "loneliness", "text"),
                        ("üòå", "peaceful", "text")
                    ]
                },
                {
                    "category": "üåà Mood Expression",
                    "channels": [
                        ("üé≠", "daily-mood", "text"),
                        ("üìù", "journal-sharing", "text"),
                        ("üí≠", "thoughts", "text"),
                        ("ü§ó", "encouragement", "text"),
                        ("üåü", "gratitude", "text"),
                        ("üé®", "creative-expression", "text")
                    ]
                },
                {
                    "category": "üó£Ô∏è Voice Support",
                    "channels": [
                        ("üí¨", "feelings-chat", "voice"),
                        ("üßò", "meditation-room", "voice"),
                        ("ü§ù", "support-circle", "voice"),
                        ("üåô", "quiet-space", "voice")
                    ]
                },
                {
                    "category": "üìö Resources",
                    "channels": [
                        ("üìñ", "self-help", "text"),
                        ("üÜò", "crisis-resources", "text"),
                        ("üí°", "coping-strategies", "text"),
                        ("üìû", "helplines", "text")
                    ]
                }
            ]
        
        # Studio/Development template
        elif "studio" in description or "roblox" in description:
            return [
                {
                    "category": "üèóÔ∏è Development Hub",
                    "channels": [
                        ("üíª", "general-dev", "text"),
                        ("üìã", "project-updates", "text"),
                        ("üêõ", "bug-reports", "text"),
                        ("üí°", "ideas-and-features", "text"),
                        ("üìö", "tutorials", "text"),
                        ("üîß", "dev-tools", "text")
                    ]
                },
                {
                    "category": "üé® Creative Workshop",
                    "channels": [
                        ("üé®", "art-showcase", "text"),
                        ("üèóÔ∏è", "building-showcase", "text"),
                        ("üéµ", "audio-assets", "text"),
                        ("üìê", "modeling", "text"),
                        ("üåà", "ui-design", "text"),
                        ("‚ú®", "effects-and-particles", "text")
                    ]
                },
                {
                    "category": "üîß Studio Workspace",
                    "channels": [
                        ("üí¨", "workspace-1", "voice"),
                        ("üí¨", "workspace-2", "voice"),
                        ("üéØ", "focus-room", "voice"),
                        ("ü§ù", "collaboration-room", "voice"),
                        ("üé•", "screen-share", "voice")
                    ]
                },
                {
                    "category": "üìä Project Management",
                    "channels": [
                        ("üìÖ", "deadlines", "text"),
                        ("üìã", "task-tracking", "text"),
                        ("üë•", "team-assignments", "text"),
                        ("üìà", "progress-reports", "text"),
                        ("üéØ", "milestones", "text")
                    ]
                },
                {
                    "category": "üöÄ Publishing",
                    "channels": [
                        ("üöÄ", "releases", "text"),
                        ("üì¢", "announcements", "text"),
                        ("üîç", "testing", "text"),
                        ("üìä", "analytics", "text"),
                        ("üí¨", "user-feedback", "text")
                    ]
                }
            ]
        
        # Brainrot/Meme template
        elif "brainrot" in description or "meme" in description or "gen z" in description:
            return [
                {
                    "category": "üß† Brainrot Central",
                    "channels": [
                        ("ü§°", "general-brainrot", "text"),
                        ("üíÄ", "skull-emoji", "text"),
                        ("üì±", "tiktok-reposts", "text"),
                        ("üî•", "fire-takes", "text"),
                        ("üòÇ", "memes", "text"),
                        ("üß†", "no-thoughts-head-empty", "text"),
                        ("üíØ", "fr-no-cap", "text")
                    ]
                },
                {
                    "category": "üì± Social Media Chaos",
                    "channels": [
                        ("üéµ", "cringe-music", "text"),
                        ("üéÆ", "sus-gaming", "text"),
                        ("üì∏", "selfie-check", "text"),
                        ("üí¨", "ratio-zone", "text"),
                        ("ü§≥", "main-character", "text"),
                        ("üì∫", "chronically-online", "text")
                    ]
                },
                {
                    "category": "üóø Sigma Grindset",
                    "channels": [
                        ("üóø", "chad-energy", "text"),
                        ("üí™", "gym-bros", "text"),
                        ("üß†", "big-brain-moves", "text"),
                        ("üí∞", "hustle-culture", "text"),
                        ("üéØ", "w-or-l", "text"),
                        ("‚ö°", "rizz-academy", "text")
                    ]
                },
                {
                    "category": "üéôÔ∏è Voice Brainrot",
                    "channels": [
                        ("üé§", "yapping-session", "voice"),
                        ("üíÄ", "skull-emoji-vc", "voice"),
                        ("üéÆ", "gaming-and-crying", "voice"),
                        ("üéµ", "earrape-music", "voice"),
                        ("ü§°", "clown-convention", "voice"),
                        ("üò≠", "emotional-damage", "voice")
                    ]
                },
                {
                    "category": "ü§Ø Maximum Chaos",
                    "channels": [
                        ("üî•", "this-is-fine", "text"),
                        ("üí•", "explosion-zone", "text"),
                        ("üå™Ô∏è", "chaos-incarnate", "text"),
                        ("üé™", "circus-energy", "text"),
                        ("ü§™", "unhinged-takes", "text"),
                        ("üíÄ", "death-by-cringe", "text")
                    ]
                }
            ]

        # SmallPartners template
        elif "onepartnership" in description or "officialpartners" in description or "partnership" in description:
        return [
            {
                "category": "üî• Partnershipments",
                "channels": [
                    ("üì±", "partnerships", "text"),
                    ("üíÄ", "partnership-requirements", "text"),
                    ("üì±", "our-ad", "text"),
                    ("üî•", "partnership-announcements", "text")
                                
                ]
            }
        ]    
                    
        # Default if no specific pattern matches
        return None

async def setup(bot):
    await bot.add_cog(TemplateCog(bot))